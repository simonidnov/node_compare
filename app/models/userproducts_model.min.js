var $jscomp={scope:{},findInternal:function(a,e,b){a instanceof String&&(a=String(a));for(var c=a.length,d=0;d<c;d++){var g=a[d];if(e.call(b,g,d,a))return{i:d,v:g}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,e,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[e]=b.value)};
$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(a,e,b,c){if(e){b=$jscomp.global;a=a.split(".");for(c=0;c<a.length-1;c++){var d=a[c];d in b||(b[d]={});b=b[d]}a=a[a.length-1];c=b[a];e=e(c);e!=c&&null!=e&&$jscomp.defineProperty(b,a,{configurable:!0,writable:!0,value:e})}};
$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,b){return $jscomp.findInternal(this,a,b).v}},"es6-impl","es3");var db=require("mongoose"),config=require("../config/config"),Orders_model=require("../models/orders_model"),Products_model=require("../models/products_model"),userproducts_datas={user_id:{type:"string"},product_id:{type:"string"},meta_datas:{type:"Object"},created:{type:"Date","default":Date.now},updated:{type:"Date","default":Date.now}};
0===db.connection.readyState&&db.connect(config.database.users,{useMongoClient:!0});var userproductsSchemas=new db.Schema(userproducts_datas),Userproducts=db.model("Userproducts",userproductsSchemas);module.exports={attributes:userproducts_datas};
module.exports.get=function(a,e,b){var c={};"undefined"!==typeof a.session.Auth?c={user_id:a.session.Auth._id}:"undefined"!==typeof a.query.user_id?c={user_id:datas.user_id}:"undefined"!==typeof a.query.options&&(c={user_id:a.query.options.user_id});if("undefined"===typeof c.user_id)return b({status:401,datas:{message:"UNAUTHORISED_NEED_USER"}}),!1;a.user_id=c.user_id;this.checkOrders(a,e,function(a){Userproducts.find(c,function(a,c){a?b({status:405,datas:a}):b({status:200,datas:c});return!1}).sort({created:-1})})};
module.exports.allreadyBuy=function(a,e,b){Userproducts.findOne({user_id:a,product_id:e},function(a,d){a?b({status:404,message:"NEVER_BUY"}):null===d?b({status:404,message:"NEVER_BUY",datas:d}):b({status:200,message:"ALREADY_BUY",datas:d})})};
module.exports.checkOrders=function(a,e,b){var c=this;Orders_model.get(a,e,function(b){if(200===b.status)for(var d=0;d<b.datas.length;d++)for(var f=0;f<b.datas[d].basketdatas.products.length;f++)c.create({user_id:a.user_id,product_id:b.datas[d].basketdatas.products[f].product_id},e,function(a){})});b({status:200,message:"CHECKING"})};
module.exports.create=function(a,e,b){Userproducts.find({user_id:a.user_id,product_id:a.product_id},function(c,d){c||0===d.length?Products_model.get({product_id:a.product_id},e,function(c){new_userproduct=new Userproducts({user_id:a.user_id,product_id:a.product_id,meta_datas:c.datas[0]});new_userproduct.save(function(a,c){a?b({status:405,message:a}):b({status:200,datas:c})})}):b({status:201,datas:d,message:"ALREADY_ADDED_PRODUCT_ON_USER"})})};

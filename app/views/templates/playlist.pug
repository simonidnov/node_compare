block playlist
  .page-main#playlist()
    .playlist.headingwave
      .waves
        #waveform
    .playlist#player()
      transition(name="showCover" v-on:leave="leaveCover" v-on:enter="enterCover")
        .sdisplayCover(v-if="isDisplayCover", v-on:click="isDisplayCover = !isDisplayCover")
          img.picture#coverPicture(v-bind:src='cover', v-if="isDisplayCover")
      .player
        div.share_view(v-if="shareMode")
          .tabs
            .tab(v-on:click="sharerForm = false; getShareUrl();" v-bind:class="{ selected : !sharerForm}") Partager
            .tab(v-on:click="sharerForm = true; getEmbedCode();" v-bind:class="{ selected : sharerForm}") Integrer
          .scrollview
            .shareButtons(v-if="!sharerForm")
              a.share_button(v-bind:href="'https://www.facebook.com/sharer/sharer.php?u=' + shareUrl" target="_blank")
                include ../../public/images/player_assets/facebook.svg
              a.share_button(v-bind:href="'https://www.twitter.com/share?hashtags=joyvox,musique,kids,'+product.label+'&url=' + shareUrl +'&text=Écoutez les playlists Joyvox !'" target="_blank")
                include ../../public/images/player_assets/twitter.svg
              a.share_button(v-bind:href="'mailto:?&subject=écoutez sur Joyvox&body=écoute#20ce%20morceau%20%3A%20' + shareUrl" target="_blank")
                include ../../public/images/player_assets/email.svg
            form.form(v-if="sharerForm")
              textarea(v-model="embedCode" placeholder="pour partager, copiez collez ce code") {{ embedCode }} 
              div.form-group
                input(type="checkbox" id="shareNav" v-model="shareNav" v-on:change="getEmbedCode()")
                label(for="shareNav") Activer la navigation
              div.form-group
                input(type="checkbox" id="shareAutoPlay" v-model="shareAutoPlay" v-on:change="getEmbedCode()")
                label(for="shareAutoPlay") Lecture automatique
              div.form-group
                input(type="checkbox" id="shareDisplayCover" v-model="shareDisplayCover" v-on:change="getEmbedCode()")
                label(for="shareDisplayCover") Afficher la couverture
              h4 Modifiez les couleurs de votre player
              div.form-group
                input(type="color" id="shareColor1" v-model="shareColor1" v-on:change="getEmbedCode()")
                label(for="shareColor1") Couleur 1
              div.form-group
                input(type="color" id="shareColor2" v-model="shareColor2" v-on:change="getEmbedCode()")
                label(for="shareColor2") Couleur 2
        .navBar
          .loadError(v-if="hasError")
            span Erreur de chargement
          transition(name="showLoader")
            .loadProgress(v-if="isLoading")
              div 
                .barLoad(v-bind:style="{'width':loadProgress+'%'}")
                  span {{ loadProgress }} %
          .cover(v-bind:style="{ 'background-image': 'url('+cover+')' }", v-on:click="isDisplayCover = !isDisplayCover")
            .iconzoom
              include ../../public/images/player_assets/zoom.svg
          .player_options
            button.pbtn(v-on:click="setLoop" v-if="!isLoop")
              include ../../public/images/player_assets/loop.svg
            button.pbtn.enabled(v-on:click="setLoop" v-else)
              include ../../public/images/player_assets/loop.svg
            button.pbtn(v-on:click="setRandom" v-if="!isRandom")
              include ../../public/images/player_assets/random.svg
            button.pbtn.enabled(v-on:click="setRandom" v-else)
              include ../../public/images/player_assets/random.svg
            button.pbtn.nomobile(v-on:click="download")
              include ../../public/images/player_assets/download.svg
            button.pbtn(v-on:click="shareMode = !shareMode; getShareUrl();")
              include ../../public/images/player_assets/share.svg
            
          .player_nav
            template(v-if="index > 0")
              button.pbtn(v-on:click="playPrev()")
                include ../../public/images/player_assets/prev.svg
            template(v-if="index == 0")
              button.pbtn.disabled()
                include ../../public/images/player_assets/prev.svg
            button.pbtn(v-on:click="playPause()")
              template(v-if="isplaying")
                include ../../public/images/player_assets/pause.svg
              template(v-if="isplaying == false")
                include ../../public/images/player_assets/play.svg
            template(v-if="index < medias.length-1")
              button.pbtn(v-on:click="playNext()")
                include ../../public/images/player_assets/next.svg
            template(v-if="index == medias.length-1")
              button.pbtn.disabled
                include ../../public/images/player_assets/next.svg
            template(v-if="volume == 0")
              button.pbtn(v-on:click="setVolume(1)")
                include ../../public/images/player_assets/volumecut.svg
            template(v-if="volume == 1")
              button.pbtn(v-on:click="setVolume(0)")
                include ../../public/images/player_assets/volume.svg
      .scrollview(v-on:scroll="handleScroll")
        h1.title
          span.infos_icon(v-on:click="showInfos = !showInfos")
            include ../../public/images/player_assets/infos.svg
          span {{ title }}
        p.infos(v-if="showInfos") {{ description }}
        ul.mediasList
          li(v-for="(media, i) in medias" v-on:click="playAudio(i)" v-if="media[0].mimetype == 'audio/mp3' || media[0].mimetype == 'audio/wav'")
            template(v-if="index == i")
              .icon#playButton
                template(v-if="isplaying")
                  include ../../public/images/player_assets/pause.svg
                template(v-if="isplaying == false")
                  include ../../public/images/player_assets/play.svg
              span.label {{ media[0].originalname }} - Artistes - Style musical
              .progressDuration#progressDuration
              .progress#progresslist
            template(v-if="index != i")
              .icon#pauseButton
                include ../../public/images/player_assets/play.svg
              span.label {{ media[0].originalname }} - Artistes - Style musical
    

    script(src="../public/javascripts/components/wavesurfer.min.js")
    script.
      var lopp = '#{params.loop}',
          sidebar = '#{params.sidebar}',
          product = !{JSON.stringify(product)};
      var player = new Vue({
        el: '#player',
        data: {
          shareUrl : "HELLO",
          sharerForm : false,
          shareMode : false,
          embedCode : "<iframe></iframe>",
          shareNav : false,
          shareAutoPlay : false,
          shareDisplayCover : false,
          shareColor1 : "#111",
          shareColor2 : "#222",
          checked:false,
          hasProduct : false,
          hasRights : false,
          product : !{JSON.stringify(product)},
          title : "",
          description : "",
          cover : "",
          showInfos:false,
          message: 'Hello Vue!',
          medias: [],
          index: ('#{params.index}' !== "")? parseInt('#{params.index}') : 0,
          autoplay: ('#{params.autoplay}' !== "" && '#{params.autoplay}' === "true")? true : false,
          percent: 0,
          isRandom: ('#{params.random}' !== "" && '#{params.random}' === "true")? true : false,
          isLoop: ('#{params.loop}' !== "" && '#{params.loop}' === "true")? true : false,
          isplaying: false,
          isDisplayCover: false,
          show: false,
          hasError : false,
          volume : ('#{params.volume}' !== "")? parseInt('#{params.volume}') : 1,
          displayDownload : false,
          isLoading:false,
          loadProgress:0
        },
        mounted () {
          if(typeof this.product !== "undefined" && this.product !== null){
            this.title = this.product.label;
            this.description = this.product.description;
            this.cover = this.product.thumb;
            this.medias = this.product.medias;
            this.hasProduct = true;
          };
          this.$nextTick(function() {
            var self = this;
            this.color1= (typeof '#{params.color1}' !== "undefined" && '#{params.color1}' !== "")? "#"+'#{params.color1}' : '#333';
            this.color2= (typeof '#{params.color2}' !== "undefined" && '#{params.color2}' !== "")? "#"+'#{params.color2}' : '#222';
            function shadeColor(hex, lum) {  // deprecated. See below.
              hex = String(hex).replace(/[^0-9a-f]/gi, '');
            	if (hex.length < 6) {
            		hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
            	}
            	lum = lum || 0;
            	var rgb = "#", c, i;
            	for (i = 0; i < 3; i++) {
            		c = parseInt(hex.substr(i*2,2), 16);
            		c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
            		rgb += ("00"+c).substr(c.length);
            	}
            	return rgb;
            }
            this.color1light = shadeColor(this.color1, .5);
            this.color2light = shadeColor(this.color2, .5);
            this.player_options = {
              barGap:0, 
              barWidth:4, 
              cursorWidth:1, 
              fillParent:true, 
              autoCenter:true, 
              height:256, 
              scrollParent:true, 
              barHeight:1, 
              responsive:true, 
              container: '#waveform', 
              cursorColor: "#FFFFFF",
              waveColor: this.color1light,
              progressColor: this.color2light
            };
            this.wavesurfer = WaveSurfer.create(this.player_options);
            if(this.medias.length > 0){
              this.wavesurfer.load("../products/medias/?media_path="+this.medias[this.index][0].path+'&product_id='+product._id+'&user_id=');
            }
            this.setVolume(this.volume);
            this.wavesurfer.on('pause', function () {
              self.isplaying = false;
            });
            this.wavesurfer.on('play', function () {
              self.isplaying = true;
            });
            this.wavesurfer.on('audioprocess', function (e) {
              self.percent = (e/self.wavesurfer.getDuration()*100).toFixed(2);
              document.getElementById('progresslist').style.width = self.percent+'%';
              document.getElementById('progressDuration').innerHTML = Math.round(e)+" / "+Math.round(self.wavesurfer.getDuration())+" sec";
            });
            this.wavesurfer.on('destroy', function () {
            });
            this.wavesurfer.on('error', function () {
              self.hasError = true;
            });
            this.wavesurfer.on('finish', function () {
              if(self.isLoop){
                self.playAudio(self.index);
              }else if(self.isRandom){
                self.playAudio(Math.floor(Math.random()*self.medias.length-1));
              }else if(self.index === self.medias.length-1){
                self.playAudio(0);
              }else{
                self.playAudio(self.index+1);
              }
            });
            this.wavesurfer.on('interaction', function (e) {
              console.log('interaction ', e);
            });
            this.wavesurfer.on('loading', function (e) {
              //console.log('loading ', e);
              self.isLoading = true;
              self.loadProgress = e;
              document.getElementById('progressDuration').innerHTML = "chargement "+e+"%";
              if(e === 100){
                self.isLoading = false;
                document.getElementById('progressDuration').innerHTML = "Prêt à jouer";
              }
            });
            this.wavesurfer.on('mute', function (e) {
              console.log('mute ', e);
            });
            this.wavesurfer.on('volume', function (e) {
              console.log('volume ', e);
            });
            this.wavesurfer.on('zoom', function (e) {
              console.log('zoom ', e);
            });
            this.wavesurfer.on('seek', function (e) {
              console.log('seek ', e);
            });
            this.wavesurfer.on('waveform-ready', function (e) {
              console.log('waveform-ready ', e);
            });
            this.wavesurfer.on('ready', function (e) {
              self.hasError = false;
              if(self.autoplay){
                self.wavesurfer.playPause();
              }
              console.log('ready ', e);
            });
          })
        },
        methods : {
          getShareUrl : function(){
            this.shareUrl = window.location.origin+'/playlist/'+this.product._id+'?index='+this.index;
            return this.shareUrl;
          },
          getEmbedCode : function(){
            this.embedCode = '<iframe src="'+window.location.origin+'/playlist/'+this.product._id+'?index='+this.index+'&loop='+this.isLoop+'&random='+this.isRandom+'&color1='+this.shareColor1.replace('#', '')+'&color2='+this.shareColor2.replace('#', '')+'&sidebar='+this.shareNav+'&autoplay='+this.shareAutoPlay+'&cover='+this.shareDisplayCover+'" width="800" height="600" style="max-width:100%;"></iframe>';
            return this.embedCode;
          },
          playAudio: function(id){
            if(id === this.index){
              this.playPause();
              return false;
            }
            this.index = id;
            this.autoplay = true;
            console.log('PLAYAUDIO product_id ::: ', this.product._id);
            var user_id="";
            if(typeof index.sdk.api.user !== "undefined" && index.sdk.api.user !== null){
              if(typeof index.sdk.api.user._id !== "undefined"){
                user_id = index.sdk.api.user._id;
              }
            }
            this.wavesurfer.load("../products/medias/?media_path="+this.medias[id][0].path+'&product_id='+this.product._id+'&user_id='+user_id);
          },
          setLoop: function(){
            if(this.isLoop){
              this.isLoop = false;
            }else{
              this.isLoop = true;
            }
          },
          setRandom: function() {
            if(this.isRandom){
              this.isRandom = false;
            }else{
              this.isRandom = true;
            }
          },
          playPause: function() {
            console.log('playpause');
            this.wavesurfer.playPause();
          },
          playPrev: function() {
            this.playAudio(this.index-1);
          },
          playNext: function() {
            this.playAudio(this.index+1);
          },
          stop: function(){
            this.wavesurfer.stop();
          },
          displayCover: function() {
            this.isDisplayCover = true;
          },
          hideCover: function() {
            this.isDisplayCover = false;
          },
          leaveCover : function(){
            document.getElementById('coverPicture').classList.remove('showed');
          },
          enterCover : function(){
            document.getElementById('coverPicture').classList.add('showed');
          },
          setVolume : function(volume){
            this.volume = volume;
            this.wavesurfer.setVolume(this.volume);
          },
          download : function(){
            if(_.where(userproducts, {product_id:this.product._id}).length > 0){
              index.sdk.api.get('/products/download/'+this.product._id, {}, function(e) {
                if(typeof e.zip_file !== "undefined"){
                  index.sdk.downloadFile(e.zip_file, $('body'), function(e){
                    if(e.status === "completed"){
                      //TODO clean server side zip and folder
                    }
                  });
                }
              }, function(e){
              }, function(e){
              });
            }else{
              var pop = new popeye(
                $('#playlist'), 
                {
                  type:"modal",
                  title:"Téléchargement",
                  message:"Pour télécharger cet album, vous devez être muni d'un code de téléchargement.<br>Si vous avez un code de téléchargement ou pour plus d'informations sur les téléchargements, rendez-vous sur la page de téléchargement.",
                  buttons:[
                    {
                      "class":"btn-warning",
                      "label":"Annuler",
                      "value":0
                    },
                    {
                      "class":"btn-success",
                      "label":"J'ai un code",
                      "value":1,
                      "href":"https://auth.joyvox.fr/code-de-telechargement",
                      "target":"_blank"
                    }
                  ]
                },
                function(e){
                  console.log(e);
                }
              );
              pop.init();
            }
          },
          embed : function(){
            alert('emebed');
          },
          share : function(){
            this.shareMode = true;
          },
          handleScroll : function(evt, el){
            if(evt.target.scrollTop > 80){
              document.getElementById('playlist').classList.add('sticky');
            }else{
              document.getElementById('playlist').classList.remove('sticky');
            }
            if(evt.target.scrollTop == (evt.target.scrollHeight-window.innerHeight) && sidebar !== "false"){
              document.body.style.overflow = 'scroll';
              document.getElementsByClassName('page-sidebar')[0].style.position = 'absolute';
            }
          },
          sharetab : function(event, id){
            
          }
        }
      });
    style.
      .share_view{
        position:absolute;
        z-index:999;
        top:-70px;
        right:7px;
        background:#FFF;
        color:#222;
        text-align:left;
        border-radius:5px;
        width:300px;
        max-height:400px;
        display:table;
        -webkit-box-shadow: 0px 5px 60px -10px rgba(0,0,0,0.75);
        -moz-box-shadow: 0px 5px 60px -10px rgba(0,0,0,0.75);
        box-shadow: 0px 5px 60px -10px rgba(0,0,0,0.75);
      }
      .share_view:before{
        content:'';
        width:30px;
        height:30px;
        background:#FFF;
        position:absolute;
        top:-5px;
        transform:rotate(45deg);
        right:10px;
      }
      .share_view .tabs{
        display:inline-flex;
        width:100%;
        border-bottom:1px solid #E3E3E3;
        margin-bottom:10px;
      }
      .share_view .tabs .tab{
        font-size:17px;
        padding:20px;
        padding-bottom:10px;
        cursor:pointer;
        position:relative;
      }  
      .share_view .tabs .tab.selected:after{
        content:'';
        position:absolute;
        height:2px;
        width:80%;
        background:#222;
        left:0;
        right:0;
        margin:auto;
        bottom:0px;
      }
      .share_view form{
        padding:20px;
        padding-top:0;
      }
      .share_view form textarea{
        width:100%;
        height:60px;
      }
      .share_view form .form-group{
        padding-top:10px;
      }
      .share_view form input[type="color"]{
        border:0;
        width:48px;
        height:48px;
      }
      
      .share_view .shareButtons{
        display:inline-flex;
        margin-bottom:20px;
      }
      .share_view .shareButtons .share_button{
        width:48px;
        height:48px;
        text-decoration:none;
        margin:5px;
        cursor:pointer;
      }
      .share_view .shareButtons .share_button:hover{
        background:#F9F9F9;
      }
      
      
      .playlist .waves{
        background-color:##{params.color1};
      }
      .playlist .waves wave:nth-child(2){
        background-color:##{params.color2} !important;
      }
      .playlist .player{
        background-color:##{params.color1};
      }
      .playlist .player_options .pbtn.enabled svg rect,
      .playlist .player_options .pbtn.enabled svg path,
      .playlist .player_options .pbtn.enabled svg polygon{
        fill:##{params.color1};
      }
      .playlist .mediasList li .progress{
        background-color:##{params.color1};
      }
      .downloadOptions .pbtn{
        background-color:##{params.color2};
      }
      /*
      .playlist .mediasList li .icon svg path{
        fill:##{params.color1};
      }
      */
    if(params.cover === "false")
      style.
        .playlist .cover{
          display:none;
        }
    if(params.sidebar === "false")
      style.
        .playlist .player_options{
          margin-right:0px !important;
        }

    
    
